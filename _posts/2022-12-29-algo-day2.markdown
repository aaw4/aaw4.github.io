---
layout: post
title:  "Algo Day 2"
date:   2022-12-29 15:34:44 -0000
categories: [Algorithm,Array]
---

<div class="post-categories">
  Categories:
  {% if post %}
    {% assign categories = post.categories %}
  {% else %}
    {% assign categories = page.categories %}
  {% endif %}
  {% for category in categories %}
    {% if categories[-1] == category %}
        <a href="{{site.baseurl}}/categories/#{{category|slugize}}">{{category}}</a>
    {% else %}
        <a href="{{site.baseurl}}/categories/#{{category|slugize}}">{{category}},</a>
    {% endif %}
  {% unless forloop.last %}&nbsp;{% endunless %}
  {% endfor %}
</div>
&nbsp;

### Problem 1:

[977. Squares of a Sorted Array](https://leetcode.com/problems/squares-of-a-sorted-array/)

* First Thought:

  1. find first index that's >= 0
  2. I want to do a inplace algo

&nbsp;

* Thoughts After Looking At The Solution:

  1. in place not possible
  2. try not inplace first

&nbsp;

* Difficulties Encountered:

  1. in place hard to acheive with two pointers

&nbsp;

* Conclusion
  1. Think of not that optimal solution first.

&nbsp;

### Problem 2:

[209. Minimum Size Subarray Sum](https://leetcode.com/problems/minimum-size-subarray-sum/)

* First Thought:

  1. A subarray is a contiguous non-empty sequence of elements within an array.

&nbsp;

* Thoughts After Looking At The Solution:

  1. Most important part of moving window is to decide how to move the starting point

&nbsp;

* Difficulties Encountered:

  1. corner cases. first element >= target

&nbsp;

* Conclusion:

  1. moving window solution
  {% highlight python %}
  class Solution(object):
    def minSubArrayLen(self, target, nums):
        """
        :type target: int
        :type nums: List[int]
        :rtype: int
        """
        # we only need length
        res = 10**5 + 1
        left = 0
        right = 0
        curSum = nums[0]
        if curSum >= target:
            return 1
        while left < len(nums) and right < len(nums):
            while right + 1 < len(nums) and curSum + nums[right + 1] < target:
                right += 1
                curSum += nums[right]
            if right + 1 == len(nums):
                break
            else:
                curRes = right + 1 - left + 1
                res = min(curRes, res)
            curSum -= nums[left]
            left += 1
                 
        return 0 if res == 10**5 + 1 else res
  {% endhighlight %}

&nbsp;

### Problem 3:

[59. Spiral Matrix II](https://leetcode.com/problems/spiral-matrix-ii/)

* First Thought:

  1. brute force
  2. NA

&nbsp;

* Thoughts After Looking At The Solution:

  1. Gotta have same rules for each side
  2. have to figure out how many variables we need for record keeping.

&nbsp;

* Difficulties Encountered:

  1. don't know while condition. Should be (n / 2), which is the number of circle we need.
  2. edge condition. move down and move left has nothing to do with startx or starty. only offset.

&nbsp;

* Conclusion:

  1. solution
  {% highlight python %}
  class Solution(object):
    def generateMatrix(self, n):
        """
        :type n: int
        :rtype: List[List[int]]
        """
        res = [ [0] * n for _ in range(n)]
        k = 1
        offset = 1 # used for knowing which loop we are in
        startx, starty = 0, 0 # used to dynamically change the start point of each loop
        
        while offset <= n // 2: # even number needs n // 2 circles, odd number we need to fill the mid at the end
            for i in range(starty, n - offset):
                res[startx][i] = k
                k += 1
            for i in range(startx, n - offset):
                res[i][n - offset] = k
                k += 1
            for i in range(n - offset, starty, -1):
                res[n - offset][i] = k
                k += 1
            for i in range(n - offset, startx, -1):
                res[i][starty] = k
                k += 1
            offset += 1
            startx += 1
            starty += 1

        if n % 2 == 1:
            res[n // 2][n // 2] = n * n
        
        return res
  {% endhighlight %}

&nbsp;


### Tips:
recursively unchanged variable. \
clean code has clear principles.