---
layout: post
title:  "Algo Day 52"
date:   2023-02-16 19:11:00 -0000
categories: [Algorithm,Dynamic Programming]
---

<div class="post-categories">
  Categories:
  {% if post %}
    {% assign categories = post.categories %}
  {% else %}
    {% assign categories = page.categories %}
  {% endif %}
  {% for category in categories %}
    {% if categories[-1] == category %}
        <a href="{{site.baseurl}}/categories/#{{category|slugize}}">{{category}}</a>
    {% else %}
        <a href="{{site.baseurl}}/categories/#{{category|slugize}}">{{category}},</a>
    {% endif %}
  {% unless forloop.last %}&nbsp;{% endunless %}
  {% endfor %}
</div>

&nbsp;


### Problem 1:

[121. Best Time to Buy and Sell Stock](https://leetcode.com/problems/best-time-to-buy-and-sell-stock/)

* First Thought:

  1. There's three states, buy or sell or do nothing on a day.

&nbsp;

* Thoughts After Looking At The Solution:

  1. Actually there's two states, which is dp[i][0] hold, and dp[i][1] not hold.

&nbsp;

* Difficulties Encountered:

  1. NA

&nbsp;

* Conclusion:

Solution:
  {% highlight python %}
    class Solution:
        def maxProfit(self, prices: List[int]) -> int:
            dp = [[0 for _ in range(2)] for _ in range(len(prices))]
            dp[0][0] = -prices[0]
            for i in range(1, len(prices)):
                dp[i][0] = max(-prices[i], dp[i-1][0])
                dp[i][1] = max(dp[i-1][1], prices[i] + dp[i-1][0])
            return dp[-1][1]
  {% endhighlight %}

Optimized Solution:
{% highlight python %}
  class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        length = len(prices)
        dp = [[0] * 2 for _ in range(2)]
        dp[0][0] = -prices[0]
        dp[0][1] = 0
        for i in range(1, length):
            dp[i % 2][0] = max(dp[(i-1) % 2][0], -prices[i])
            dp[i % 2][1] = max(dp[(i-1) % 2][1], prices[i] + dp[(i-1) % 2][0])
        return dp[(length-1) % 2][1]
{% endhighlight %}

Only using two variables:
{% highlight python %}
  class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        length = len(prices)
        dp0, dp1 = -prices[0], 0
        for i in range(1, length):
            dp1 = max(dp1, dp0 + prices[i])
            dp0 = max(dp0, -prices[i])
        return dp1
{% endhighlight %}

&nbsp;


### Problem 2:

[122. Best Time to Buy and Sell Stock II](https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/)

* First Thought:

  1. We can buy and sell as many times as we want.

&nbsp;

* Thoughts After Looking At The Solution:

  1. NA

&nbsp;

* Difficulties Encountered:

  1. NA

&nbsp;

* Conclusion:

Solution:
  {% highlight python %}
    class Solution:
        def maxProfit(self, prices: List[int]) -> int:
            dp = [[0 for _ in range(2)] for _ in range(len(prices))]
            dp[0][0] = -prices[0]
            for i in range(1, len(prices)):
                dp[i][0] = max(dp[i-1][0], dp[i-1][1] - prices[i])
                dp[i][1] = max(dp[i-1][1], prices[i] + dp[i-1][0])
            return dp[-1][1]
  {% endhighlight %}


Optimized Solution:
{% highlight python %}
  class Solution:
      def maxProfit(self, prices: List[int]) -> int:
          length = len(prices)
          dp = [[0] * 2 for _ in range(2)]
          dp[0][0] = -prices[0]
          dp[0][1] = 0
          for i in range(1, length):
              dp[i % 2][0] = max(dp[(i-1) % 2][0], dp[(i-1) % 2][1] - prices[i])
              dp[i % 2][1] = max(dp[(i-1) % 2][1], dp[(i-1) % 2][0] + prices[i])
          return dp[(length-1) % 2][1]
{% endhighlight %}

&nbsp;