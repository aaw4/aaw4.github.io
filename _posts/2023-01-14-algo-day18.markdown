---
layout: post
title:  "Algo Day 18"
date:   2023-01-14 13:32:00 -0000
categories: [Algorithm,Tree]
---

<div class="post-categories">
  Categories:
  {% if post %}
    {% assign categories = post.categories %}
  {% else %}
    {% assign categories = page.categories %}
  {% endif %}
  {% for category in categories %}
    {% if categories[-1] == category %}
        <a href="{{site.baseurl}}/categories/#{{category|slugize}}">{{category}}</a>
    {% else %}
        <a href="{{site.baseurl}}/categories/#{{category|slugize}}">{{category}},</a>
    {% endif %}
  {% unless forloop.last %}&nbsp;{% endunless %}
  {% endfor %}
</div>

&nbsp;

### Problem 1:

[513. Find Bottom Left Tree Value](https://leetcode.com/problems/find-bottom-left-tree-value/)

* First Thought:

  1. leverorder traversal should be easy.

&nbsp;

* Thoughts After Looking At The Solution:

  1. backtrack needed here.

&nbsp;

* Difficulties Encountered:

  1. NA

&nbsp;

* Conclusion:

Recursive solution (with backtracking)
  {% highlight python %}
    # Definition for a binary tree node.
    # class TreeNode:
    #     def __init__(self, val=0, left=None, right=None):
    #         self.val = val
    #         self.left = left
    #         self.right = right
    class Solution:
        def findBottomLeftValue(self, root: Optional[TreeNode]) -> int:
            maxDepth = -float("INF")
            res = 0

            def traverse(root, depth):
                nonlocal maxDepth, res
                if not root.left and not root.right:
                    if depth > maxDepth:
                        maxDepth = depth
                        res = root.val
                if root.left:
                    depth += 1
                    traverse(root.left, depth)
                    depth -= 1
                if root.right:
                    depth += 1
                    traverse(root.right, depth)
                    depth -= 1
                return depth

            depth = 0
            traverse(root, 0)
            return res
  {% endhighlight %}


&nbsp;

### Problem 2:

[257. Binary Tree Paths](https://leetcode.com/problems/binary-tree-paths/)

* First Thought:

  1. Recursion with backtracking.
  2. need a local variable.

&nbsp;

* Thoughts After Looking At The Solution:

  1. We can return in the single level logic to instantly return when we find the path.
  2. Similar question: [113. Path Sum II](https://leetcode.com/problems/path-sum-ii/)

&nbsp;

* Difficulties Encountered:

  1. Backtracking is hard.

&nbsp;

* Conclusion:
    1. backtracking is key. Backtracking should be with recursion.
    2. Recursion Solution:
    {% highlight python %}
        class Solution:
        def hasPathSum(self, root: Optional[TreeNode], targetSum: int) -> bool:
            res = False

            def calcSum(root: Optional[TreeNode], sum, target) -> bool:
                nonlocal res

                if not root:
                    return False
                elif not root.left and not root.right:
                    sum += root.val
                    print(sum)
                    if sum == target:
                        res = True
                        return True
                    else:
                        return False

                sum += root.val
                print(sum)
                calcSum(root.left, sum, target)
                sum -= root.val
                sum += root.val
                calcSum(root.right, sum, target)
                sum -= root.val

            calcSum(root, 0, targetSum)
            return res
    {% endhighlight %}

* optimized solution:
    {% highlight python %}
        class solution:
        def haspathsum(self, root: treenode, targetsum: int) -> bool:
            def isornot(root, targetsum) -> bool:
                if (not root.left) and (not root.right) and targetsum == 0:
                    return true 
                if (not root.left) and (not root.right):
                    return false 
                if root.left:
                    targetsum -= root.left.val
                    if isornot(root.left, targetsum): return true 
                    targetsum += root.left.val 
                if root.right:
                    targetsum -= root.right.val 
                    if isornot(root.right, targetsum): return true 
                    targetsum += root.right.val 
                return false

            if root == none:
                return false 
            else:
                return isornot(root, targetsum - root.val)
    {% endhighlight %}


>TODO: iteratives solution

&nbsp;

### Problem 3:

[106. Construct Binary Tree from Inorder and Postorder Traversal](https://leetcode.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/)

* First Thought:

  1. inorder and postorder consist of unique values.
  2. last element in the postorder array is the delimiter.

&nbsp;

* Thoughts After Looking At The Solution:

  1. many details.

&nbsp;

* Difficulties Encountered:

  1. hard to write clear code.
  2. hard to decide on delimiter.

&nbsp;

* Conclusion:

    1. can't construct a binary tree from preorder and postorder! Becasue without inorder, it's not possible to decide on delimiter.
    2. Solution:
        {% highlight python %}
        # Definition for a binary tree node.
        # class TreeNode:
        #     def __init__(self, val=0, left=None, right=None):
        #         self.val = val
        #         self.left = left
        #         self.right = right
        class Solution:
            def build(self, inorder: List[int], postorder: List[int]) -> Optional[TreeNode]:
                if not postorder:
                    return None
                root = TreeNode(postorder[-1])
                if len(postorder) == 1:
                    return root
                delimiter = 0
                for i in range(len(inorder)):
                    if root.val == inorder[i]:
                        delimiter = i
                        break
                leftInorder = inorder[:delimiter]
                rightInorder = inorder[delimiter+1:]

                leftPostorder = postorder[:len(leftInorder)]
                rightPostorder = postorder[len(leftInorder):len(postorder)-1]

                root.left = self.build(leftInorder, leftPostorder)
                root.right = self.build(rightInorder, rightPostorder)
                return root

            def buildTree(self, inorder: List[int], postorder: List[int]) -> Optional[TreeNode]:
                return self.build(inorder, postorder)
        {% endhighlight %}


&nbsp;

### Tips:

* list[:] The main thing to note here is that words[:] returns a copy of the existing list, so you are iterating over a copy, which is not modified. temp = list.copy()