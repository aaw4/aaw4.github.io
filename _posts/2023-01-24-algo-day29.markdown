---
layout: post
title:  "Algo Day 29"
date:   2023-01-24 15:13:00 -0000
categories: [Algorithm,Backtracking]
---

<div class="post-categories">
  Categories:
  {% if post %}
    {% assign categories = post.categories %}
  {% else %}
    {% assign categories = page.categories %}
  {% endif %}
  {% for category in categories %}
    {% if categories[-1] == category %}
        <a href="{{site.baseurl}}/categories/#{{category|slugize}}">{{category}}</a>
    {% else %}
        <a href="{{site.baseurl}}/categories/#{{category|slugize}}">{{category}},</a>
    {% endif %}
  {% unless forloop.last %}&nbsp;{% endunless %}
  {% endfor %}
</div>

&nbsp;


### Problem 1:

[216. Combination Sum III](https://leetcode.com/problems/combination-sum-iii/)

* First Thought:

  1. Combination problem. Pruning possible

&nbsp;

* Thoughts After Looking At The Solution:

  1. It's hard to decide all parameters of the backtracking function all at once. Usually we write logic of the function first and add parameters as we need it along the way.

&nbsp;

* Difficulties Encountered:

  1. Duplicate. Hard to decide on start of the loop.

&nbsp;

* Conclusion:

Solution:
  {% highlight python %}
    class Solution:
        def __init__(self):
            self.sum = 0
            self.curRes = []
            self.res = []

        def backtracking(self, k: int, n: int, startIndex: int):
            if self.sum == n and len(self.curRes) == k:
                self.res.append(self.curRes[:])
                return
            elif len(self.curRes) == k and self.sum != n:
                return
            
            for i in range(startIndex, 9 - (k - len(self.curRes)) + 1):
                if self.sum + i + 1 > n:
                    return
                self.sum += i + 1
                self.curRes.append(i + 1)
                self.backtracking(k, n, i + 1)
                self.sum -= i + 1
                self.curRes.pop()
            

        def combinationSum3(self, k: int, n: int) -> List[List[int]]:
            self.backtracking(k, n, 0)
            return self.res
  {% endhighlight %}

&nbsp;

### Problem 2:

[17. Letter Combinations of a Phone Number](https://leetcode.com/problems/letter-combinations-of-a-phone-number/)

* First Thought:

  1. Combination problem.

&nbsp;

* Thoughts After Looking At The Solution:

  1. Here, the 'startIndex' becomes the level of recursion down. ('23', after '2', we deal with '3', as '3' is on a deeper level)
  2. Using tree structure to visualize backtracking process.

&nbsp;

* Difficulties Encountered:

  1. A 2D dimension is hard to loop through. (need to be very clear about how backtracking works)

&nbsp;

* Conclusion:

Solution:
  {% highlight python %}
    class Solution:
        def __init__(self):
            self.path = []
            self.res = []

        def backtracking(self, digits, mapping, startIndex):
            if len(self.path) == len(digits):
                self.res.append(''.join(self.path))
                return
            
            for i in range(len(mapping[digits[startIndex]])):
                self.path.append(mapping[digits[startIndex]][i])
                self.backtracking(digits, mapping, startIndex + 1)
                self.path.pop()

            return

        def letterCombinations(self, digits: str) -> List[str]:
            if not digits:
                return []
            mapping = {'2':['a','b','c'],'3':['d','e','f'], '4':['g','h','i'], '5':['j','k','l'], '6':['m','n','o'], '7':['p','q','r','s'], '8':['t','u','v'], '9':['w','x','y','z']}
            self.backtracking(digits, mapping, 0)
            return self.res
  {% endhighlight %}

A more concise solution:
    {% highlight python %}
    class Solution:
    def __init__(self):
        self.answers: List[str] = []
        self.answer: str = ''
        self.letter_map = {
            '2': 'abc',
            '3': 'def',
            '4': 'ghi',
            '5': 'jkl',
            '6': 'mno',
            '7': 'pqrs',
            '8': 'tuv',
            '9': 'wxyz'
        }

    def letterCombinations(self, digits: str) -> List[str]:
        self.answers.clear()
        if not digits: return []
        self.backtracking(digits, 0)
        return self.answers
    
    def backtracking(self, digits: str, index: int) -> None:
        # Base Case
        if index == len(digits):
            self.answers.append(self.answer)
            return 
        letters: str = self.letter_map[digits[index]]
        for letter in letters:
            self.answer += letter
            self.backtracking(digits, index + 1)
            self.answer = self.answer[:-1]
    {% endhighlight %}

&nbsp;


### Tips:

1. Pruning usually happens in the for loop range.