---
layout: post
title:  "Algo Day 38"
date:   2023-02-02 14:34:00 -0000
categories: [Algorithm,Greedy]
---

<div class="post-categories">
  Categories:
  {% if post %}
    {% assign categories = post.categories %}
  {% else %}
    {% assign categories = page.categories %}
  {% endif %}
  {% for category in categories %}
    {% if categories[-1] == category %}
        <a href="{{site.baseurl}}/categories/#{{category|slugize}}">{{category}}</a>
    {% else %}
        <a href="{{site.baseurl}}/categories/#{{category|slugize}}">{{category}},</a>
    {% endif %}
  {% unless forloop.last %}&nbsp;{% endunless %}
  {% endfor %}
</div>

&nbsp;


### Problem 1:

[860. Lemonade Change](https://leetcode.com/problems/lemonade-change/)

* First Thought:

  1. Use the highest value bill first

&nbsp;

* Thoughts After Looking At The Solution:

  1. Three scenarios. We can analyze one by one (it will be clearer) to solve the problem.

&nbsp;

* Difficulties Encountered:

  1. NA

&nbsp;

* Conclusion:

Solution:
  {% highlight python %}
  class Solution:
      def lemonadeChange(self, bills: List[int]) -> bool:
          five, ten, twenty = 0, 0, 0
          for b in bills:
              if b == 5:
                  five += 1
              if b == 10:
                  if five <= 0:
                      return False
                  else:
                      five -= 1
                      ten += 1
              if b == 20:
                  if ten > 0:
                      ten -= 1
                      if five <= 0:
                          return False
                      else:
                          five -= 1
                          twenty += 1
                  else:
                      if five < 3:
                          return False
                      else:
                          five -= 3
                          twenty += 1
          return True
  {% endhighlight %}


&nbsp;

### Problem 2:

[406. Queue Reconstruction by Height](https://leetcode.com/problems/queue-reconstruction-by-height/)

* First Thought:

  1. Question has two dimensions, h and k.

&nbsp;

* Thoughts After Looking At The Solution:

  1. First, order by height. Then, insert by taller people's k.


&nbsp;

* Difficulties Encountered:

  1. We need to seperate those two steps clearly.


&nbsp;

* Conclusion:

Greedy Solution:
  {% highlight python %}
    class Solution:
      def reconstructQueue(self, people: List[List[int]]) -> List[List[int]]:
          people.sort(key = lambda x: (-x[0], x[1]))
          res = []
          for p in people:
              res.insert(p[1], p)
          return res
  {% endhighlight %}


&nbsp;

### Problem 3:

[452. Minimum Number of Arrows to Burst Balloons](https://leetcode.com/problems/minimum-number-of-arrows-to-burst-balloons/)

* First Thought:

  1. When there is overlap, we can use the minimum arrows.

&nbsp;

* Thoughts After Looking At The Solution:

  1. We can sort by either start or end position.

&nbsp;

* Difficulties Encountered:

  1. In case there is a tie.

&nbsp;

* Conclusion:

Solution:
  {% highlight python %}
    class Solution:
        def findMinArrowShots(self, points: List[List[int]]) -> int:
            points.sort(key = lambda x: (x[0], x[1]))
            count = 1
            for i in range(1, len(points)):
                if points[i][0] > points[i-1][1]:
                    count += 1
                else:
                    points[i][1] = min(points[i][1], points[i-1][1])
            return count
  {% endhighlight %}

&nbsp;